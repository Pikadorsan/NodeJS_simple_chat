<!DOCTYPE html>
<html>
<head>
  <title>Czat</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
    }
    .chat-container {
      display: flex;
      flex-wrap: wrap;
    }
    #message-container {
      flex: 1;
      width: 60%;
      height: 400px;
      overflow-y: scroll;
      border: 1px solid #ccc;
      padding: 10px;
    }
    #message-container p {
      margin: 5px 0;
    }
    #input-container {
      flex: 1;
      width: 60%;
      margin-top: 10px;
    }
    #input-container input[type="text"] {
      width: 100%;
      padding: 5px;
    }
    #input-container input[type="submit"] {
      padding: 5px 10px;
    }
    #user-container {
  width: 200px;
  padding: 10px;
  border: 1px solid #ccc;
  margin-left: 20px;
  border-radius: 5px;
  background-color: #f9f9f9;
}

.user-list {
  margin-top: 10px;
}

.user-list p {
  margin: 5px 0;
  padding: 5px;
  border-radius: 5px;
}

.logged-in-users {
  background-color: #ffffcc;
  border: 1px solid #ffcc00;
}
    #user-container p {
      margin: 5px 0;
    }
    #user-container h3 {
      margin: 0 0 10px 0;
    }
    #log-container {
      margin-top: 20px;
      padding: 10px;
      border: 1px solid #ccc;
    }
    #log-container p {
      margin: 5px 0;
    }
    .message-container {
      display: flex;
      justify-content: flex-end;
    }
    .received-message-container {
      justify-content: flex-start;
    }
    .message-text {
      background-color: #f2f2f2;
      border-radius: 10px;
      padding: 10px;
      margin: 5px;
    }
    .sent-message-text {
      background-color: #e2f2ff;
      text-align: right;
    }
    .received-message-text {
      background-color: #c7ecc7;
      text-align: left;
    }
  </style>
</head>
<body color="aqua">
  <div class="chat-container">
    <div id="message-container"></div>
    <div id="user-container">
      <h1>Zalogowani użytkownicy</h1>
    </div>
  </div>
  <div id="input-container">
    <input type="text" id="message-input" placeholder="Wpisz wiadomość" />
    <input type="submit" id="send-button" value="Wyślij" />
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Przesłanie imienia użytkownika do serwera przy połączeniu
    const username = prompt('Podaj swoje imię:');
    socket.emit('setUsername', { username: username });

    // Obsługa przycisku "Wyślij"
    document.getElementById('send-button').addEventListener('click', () => {
      const messageInput = document.getElementById('message-input');
      const message = messageInput.value.trim();

      if (message !== '') {
        socket.emit('message', message);
        messageInput.value = '';
      }
    });

    // Obsługa otrzymanej wiadomości
    socket.on('message', (data) => {
      const messageContainer = document.getElementById('message-container');
      const newMessageContainer = document.createElement('div');
      newMessageContainer.className = `message-container${data.sent ? ' sent-message-container' : ' received-message-container'}`;

      const newMessage = document.createElement('p');
      newMessage.className = `message-text${data.sent ? ' sent-message-text' : ' received-message-text'}`;
      newMessage.textContent = data.username + ': ' + data.message;

      newMessageContainer.appendChild(newMessage);
      messageContainer.appendChild(newMessageContainer);
    });

    // Obsługa zaktualizowanej listy użytkowników
    socket.on('userList', (userList) => {
  const userContainer = document.getElementById('user-container');
  userContainer.innerHTML = '<p class="user-list">Zalogowani użytkownicy</p>';

  userList.forEach((username) => {
    const userElement = document.createElement('p');
    userElement.textContent = username;
    userElement.className = 'user-list';

    if (username === socket.username) {
      userElement.classList.add('logged-in-users');
    }

    userContainer.appendChild(userElement);
  });
});

    // Obsługa informacji o logowaniu i wylogowaniu
    socket.on('userLog', (data) => {
      const logContainer = document.getElementById('log-container');
      const logElement = document.createElement('p');
      logElement.textContent = data.message;
      logContainer.appendChild(logElement);
    });
  </script>
</body>
</html>
